@using System.Globalization

@if (Activity is not null)
{
    <li class="list-group-item">
        <div class="activity-card">
            <Avatar Url="@Activity.Athlete?.ImgUrl" Size="50" />
            <div class="activity-card-content">
                <div class="activity-card-header">
                    <h5 class="athlete-name">@Activity.Athlete?.Name</h5>
                    <p class="activity-time">@ActivityTime</p>
                </div>
                <div class="activity-card-body">
                    <h4 class="activity-title"><a title="Open in Strava" target="_blank" href="https://www.strava.com/activities/@Activity.StravaId">@Activity.Details.Name</a> - @Stats</h4>
                    <p class="activity-description">@Activity.Details.Description</p>
                </div>
            </div>
        </div>
    </li>
}

@inject IBrowserTime BrowserTime
@code {
    [Parameter]
    public Activity? Activity { get; set; }

    private string? ActivityTime;

    private string Stats
    {
        get
        {
            if (Activity is not null)
            {
                if (Activity.Details.DistanceInMeters > 0)
                {
                    float distanceInKm = Activity.Details.DistanceInMeters / 1000;
                    return $"{distanceInKm.ToString("F1")} km";
                }

                TimeSpan elapsedTime = TimeSpan.FromSeconds(Activity.Details.ElapsedTimeInSeconds);
                return $"{elapsedTime.ToString("g")}";
            }

            return string.Empty;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Activity != null)
        {
            DateTimeOffset browserTime = await BrowserTime.ConvertToLocal(Activity.Details.StartDate);
            ActivityTime = browserTime.ToString("yyyy'-'MM'-'dd' 'HH':'mm':'ss");
        }
    }
}
