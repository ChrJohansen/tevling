<ul class="list-group">
@if (Activities.Length > 0)
{
    @foreach (Activity activity in Activities)
    {
        <ActivityCard Activity="activity"></ActivityCard>
    }

    <InfiniteScrollingMarker LoadMore="LoadMore">
        <LoadingTemplate>Loading...</LoadingTemplate>
    </InfiniteScrollingMarker>
}
else
{
    <li class="list-group-item">No activities yet...</li>
}
</ul>

@inject IActivityService ActivityService
@inject ILogger<ActivityFeed> Logger
@code {
    [Parameter]
    public int? AthleteId { get; set; }

    private Activity[] Activities = [];
    private List<Activity> _activities = new();
    private IDisposable? _activityFeedSubscription;
    private int _pageSize = 50;
    private int _page = 0;

    protected override async Task OnInitializedAsync()
    {
        if (AthleteId.HasValue)
        {
            await FetchActivities(AthleteId.Value);
            SubscribeToActivityFeed(AthleteId.Value);
        }
    }

    private async Task<bool> LoadMore(CancellationToken ct = default)
    {
        int prevCount = _activities.Count;
        _page++;
        await FetchActivities(AthleteId!.Value);
        return _activities.Count > prevCount;
    }

    private async Task FetchActivities(int athleteId)
    {
        Activity[] activities = await ActivityService.GetActivitiesForAthleteAsync(athleteId, _pageSize, _page);
        AddActivities(activities);
    }

    private void SubscribeToActivityFeed(int athleteId)
    {
        _activityFeedSubscription = ActivityService.GetActivityFeedForAthlete(athleteId)
            .Catch<FeedUpdate<Activity>, Exception>(err =>
            {
                Logger.LogError(err, "Error in activity feed");
                return Observable.Throw<FeedUpdate<Activity>>(err).Delay(TimeSpan.FromSeconds(1));
            })
            .Retry()
            .Subscribe(feed =>
            {
                switch (feed.Action)
                {
                    case FeedAction.Create:
                        AddActivities(feed.Item);
                        break;
                    case FeedAction.Update:
                        ReplaceActivity(feed.Item);
                        break;
                    case FeedAction.Delete:
                        RemoveActivity(feed.Item);
                        break;
                    default:
                        throw new ArgumentOutOfRangeException("Unknown activity feed action: " + feed.Action);
                }
            });
    }

    private void AddActivities(params Activity[] activities)
    {
        _activities.AddRange(activities);

        UpdateActivities();
    }

    private void ReplaceActivity(Activity activity)
    {
        _activities.RemoveAll(a => a.Id == activity.Id);
        _activities.Add(activity);

        UpdateActivities();
    }

    private void RemoveActivity(Activity activity)
    {
        _activities.RemoveAll(a => a.Id == activity.Id);

        UpdateActivities();
    }

    private void UpdateActivities()
    {
        Activities = _activities
            .OrderByDescending(activity => activity.Details.StartDate)
            .ToArray();

        InvokeAsync(StateHasChanged);
    }
}
