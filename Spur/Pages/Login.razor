@page "/login"
@layout LoginLayout
@attribute [AllowAnonymous]

@using Microsoft.AspNetCore.Authentication

<PageTitle>Login</PageTitle>

<section class="spur-login">
    <h1 class="login-title">Spur</h1>
    <p class="login-subtitle">Accept the challenge</p>
    <div class="spur-logo"><img src="cogwheel.png" width="256" /></div>
    <form action="@StravaConfig.AuthorizeUri" method="get">
        <div class="login-button-container">Login with <button class="button strava-login" type="submit">Strava</button>
        </div>
        <input type="hidden" name="client_id" value="@StravaConfig.ClientId" />
        <input type="hidden" name="redirect_uri" value="@StravaConfig.RedirectUri" />
        <input type="hidden" name="response_type" value="@StravaConfig.ResponseType" />
        <input type="hidden" name="approval_prompt" value="@StravaConfig.ApprovalPrompt" />
        <input type="hidden" name="scope" value="@StravaConfig.Scope" />
    </form>
    <p class="copyright">Copyright © 2022 - Vegard Løkken</p>
</section>

@inject NavigationManager Navigation
@inject StravaConfig StravaConfig
@code {
    #pragma warning disable CS8618
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    #pragma warning restore CS8618

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateTask;
        var returnUrl = Navigation.ToBaseRelativePath(Navigation.Uri);

        if ((authenticationState?.User?.Identity is null || !authenticationState.User.Identity.IsAuthenticated)
        && !returnUrl.StartsWith("login"))
        {
            if (string.IsNullOrWhiteSpace(returnUrl))
                Navigation.NavigateTo("login", true);
            else
                Navigation.NavigateTo($"login?returnUrl={returnUrl}", true);
        }
    }
}
