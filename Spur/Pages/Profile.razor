@page "/profile"

<h1>Profile</h1>

<h5>Hello, @Athlete.Name!</h5>
<p>
    You joined Spur @Athlete.Created.ToString("d").
    You're currently following @Athlete.Following?.Count <a href="/athletes">athletes</a> and
    have @Athlete.Followers?.Count followers.
</p>

<h4>Import activities from Strava</h4>
<p>Import last 30 days of activities to get started! <em>(This can only be done once)</em></p>
<p>
    <button class="btn btn-primary" @onclick="Import" disabled="@(Importing || Athlete.HasImportedActivities)">
        @if (Athlete.HasImportedActivities)
        {
            <text>Import complete</text>
        }
        else if (Importing)
        {
            <text>Importing...</text>
        }
        else
        {
            <text>Import activities</text>
        }
    </button>
</p>
@if (!string.IsNullOrEmpty(ImportResult))
{
    <p>@ImportResult</p>
}

<h4>Sign out</h4>
<p>If using a public/shared computer, please remember to sign out.</p>
<p><a class="btn btn-secondary" href="/auth/logout">Sign out</a></p>

<FeatureGate FeatureFlag="FeatureFlag.Deauthorize">
    <h4>Delete account</h4>
    <p class="text-danger">Delete user account and deauthorize application. NB! This cannot be undone!</p>
    <p><a class="btn btn-danger" href="/auth/logout?deauthorize=true">Forget me</a></p>
</FeatureGate>

@inject IAuthenticationService AuthenticationService
@inject IActivityService ActivityService
@inject IAthleteService AthleteService
@code {
    private Athlete Athlete { get; set; } = default!;
    private bool Importing { get; set; }
    private string? ImportResult { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Athlete = await AuthenticationService.GetCurrentAthleteAsync();
    }

    public async Task Import()
    {
        if (Athlete.HasImportedActivities)
        {
            ImportResult = "Sorry, you can only import once.";
            return;
        }

        Importing = true;
        ImportResult = "Importing activities, please wait...";
        try
        {
            await ActivityService.ImportActivitiesForAthlete(Athlete.Id);
            Athlete = await AthleteService.SetHasImportedActivities(Athlete.Id);
            ImportResult = "Import completed successfully";
        }
        catch (Exception ex)
        {
            ImportResult = $"Import failed with error: {ex.Message}";
        }
        finally
        {
            Importing = false;
        }
    }
}
