@page "/athletes"

<PageTitle>Athletes</PageTitle>

<h1>Athletes</h1>

<label><input class="form-check-input" type="checkbox" @bind-value="ShowOnlyFollowing">Show only following</label>

<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th scope="col">Avatar</th>
            <th scope="col">Follow</th>
            <th scope="col">Name</th>
            <th scope="col">Strava</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var athlete in AthleteList)
        {
            <tr>
                <td>
                    <Avatar Url="@athlete.ImgUrl" Size="30" />
                </td>
                <td @onclick="() => ToggleFollowing(athlete.Id)">
                    <span class="oi oi-heart" style="color:@(Athlete.IsFollowing(athlete.Id) == true ? "red" : "gray")"
                        aria-hidden="true"></span>
                </td>
                <td>@athlete.Name</td>
                <td><a href="https://strava.com/athletes/@athlete.StravaId">Profile</a></td>
            </tr>
        }
    </tbody>
</table>

<InfiniteScrollingMarker LoadMore="LoadMore">
    <LoadingTemplate>Loading...</LoadingTemplate>
</InfiniteScrollingMarker>

@inject IAthleteService AthleteService
@inject IAuthenticationService AuthenticationService
@inject ILogger<Athletes> Logger
@code {
    private bool _showOnlyFollowing;
    private bool ShowOnlyFollowing
    {
        get => _showOnlyFollowing;
        set
        {
            _showOnlyFollowing = value;
            UpdateAthletes();
        }
    }
    private Athlete[] AthleteList { get; set; } = [];
    private Athlete Athlete { get; set; } = default!;
    private List<Athlete> _athletes = new();
    private IDisposable? _athleteFeedSubscription;
    private int _pageSize = 10;
    private int _page = 0;

    protected override async Task OnInitializedAsync()
    {
        Athlete = await AuthenticationService.GetCurrentAthleteAsync();
        await FetchAthletes();
        SubscribeToAthleteFeed();
    }

    private async Task<bool> LoadMore(CancellationToken ct = default)
    {
        int prevCount = _athletes.Count;
        _page++;
        await FetchAthletes();
        return _athletes.Count > prevCount;
    }

    private async Task FetchAthletes()
    {
        Athlete[] athletes = await AthleteService.GetAthletesAsync(_pageSize, _page);
        AddAthletes(athletes);
    }

    private async Task ToggleFollowing(int followingId)
    {
        Athlete = await AthleteService.ToggleFollowingAsync(Athlete, followingId);
        await InvokeAsync(StateHasChanged);
    }

    private void SubscribeToAthleteFeed()
    {
        _athleteFeedSubscription = AthleteService.GetAthleteFeed()
            .Catch<FeedUpdate<Athlete>, Exception>(err =>
            {
                Logger.LogError(err, "Error in athlete feed");
                return Observable.Throw<FeedUpdate<Athlete>>(err).Delay(TimeSpan.FromSeconds(1));
            })
            .Retry()
            .Subscribe(feed =>
            {
                switch (feed.Action)
                {
                    case FeedAction.Create:
                        AddAthletes(feed.Item);
                        break;
                    case FeedAction.Update:
                        ReplaceAthlete(feed.Item);
                        break;
                    case FeedAction.Delete:
                        RemoveAthlete(feed.Item);
                        break;
                    default:
                        throw new ArgumentOutOfRangeException("Unknown athlete feed action: " + feed.Action);
                }
            });
    }

    private void AddAthletes(params Athlete[] athletes)
    {
        _athletes.AddRange(athletes);

        UpdateAthletes();
    }

    private void ReplaceAthlete(Athlete athlete)
    {
        _athletes.RemoveAll(a => a.Id == athlete.Id);
        _athletes.Add(athlete);

        UpdateAthletes();
    }

    private void RemoveAthlete(Athlete athlete)
    {
        _athletes.RemoveAll(a => a.Id == athlete.Id);

        UpdateAthletes();
    }

    private void UpdateAthletes()
    {
        AthleteList = _athletes
            .Where(athlete => athlete.Id != Athlete.Id)
            .Where(athlete => !ShowOnlyFollowing || Athlete.IsFollowing(athlete.Id))
            .OrderBy(athlete => athlete.Name)
            .ToArray();

        InvokeAsync(StateHasChanged);
    }
}
